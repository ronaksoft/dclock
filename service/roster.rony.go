// Code generated by Rony's protoc plugin; DO NOT EDIT.

package service

import (
	fmt "fmt"
	model "github.com/ronaksoft/dclock/model"
	rony "github.com/ronaksoft/rony"
	edge "github.com/ronaksoft/rony/edge"
	edgec "github.com/ronaksoft/rony/edgec"
	registry "github.com/ronaksoft/rony/registry"
	proto "google.golang.org/protobuf/proto"
	sync "sync"
)

const C_PageSetRequest int64 = 1561788875

type poolPageSetRequest struct {
	pool sync.Pool
}

func (p *poolPageSetRequest) Get() *PageSetRequest {
	x, ok := p.pool.Get().(*PageSetRequest)
	if !ok {
		return &PageSetRequest{}
	}
	return x
}

func (p *poolPageSetRequest) Put(x *PageSetRequest) {
	x.Page = 0
	x.ReplicaSet = 0
	x.Replace = false
	p.pool.Put(x)
}

var PoolPageSetRequest = poolPageSetRequest{}

func (x *PageSetRequest) DeepCopy(z *PageSetRequest) {
	z.Page = x.Page
	z.ReplicaSet = x.ReplicaSet
	z.Replace = x.Replace
}

func (x *PageSetRequest) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *PageSetRequest) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *PageSetRequest) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_PageSetRequest, x)
}

const C_PageGetRequest int64 = 1934762073

type poolPageGetRequest struct {
	pool sync.Pool
}

func (p *poolPageGetRequest) Get() *PageGetRequest {
	x, ok := p.pool.Get().(*PageGetRequest)
	if !ok {
		return &PageGetRequest{}
	}
	return x
}

func (p *poolPageGetRequest) Put(x *PageGetRequest) {
	x.Page = 0
	x.ReplicaSet = 0
	x.CreateNew = false
	p.pool.Put(x)
}

var PoolPageGetRequest = poolPageGetRequest{}

func (x *PageGetRequest) DeepCopy(z *PageGetRequest) {
	z.Page = x.Page
	z.ReplicaSet = x.ReplicaSet
	z.CreateNew = x.CreateNew
}

func (x *PageGetRequest) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *PageGetRequest) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *PageGetRequest) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_PageGetRequest, x)
}

const C_PageGet int64 = 1624045528
const C_PageSet int64 = 2078538868

func init() {
	registry.RegisterConstructor(1561788875, "PageSetRequest")
	registry.RegisterConstructor(1934762073, "PageGetRequest")
	registry.RegisterConstructor(1624045528, "PageGet")
	registry.RegisterConstructor(2078538868, "PageSet")
}

type IRoster interface {
	PageGet(ctx *edge.RequestCtx, req *PageGetRequest, res *model.Page)
	PageSet(ctx *edge.RequestCtx, req *PageSetRequest, res *model.Page)
}

type rosterWrapper struct {
	h IRoster
}

func (sw *rosterWrapper) pageGetWrapper(ctx *edge.RequestCtx, in *rony.MessageEnvelope) {
	req := PoolPageGetRequest.Get()
	defer PoolPageGetRequest.Put(req)
	res := model.PoolPage.Get()
	defer model.PoolPage.Put(res)
	err := proto.UnmarshalOptions{Merge: true}.Unmarshal(in.Message, req)
	if err != nil {
		ctx.PushError(rony.ErrCodeInvalid, rony.ErrItemRequest)
		return
	}

	sw.h.PageGet(ctx, req, res)
	if !ctx.Stopped() {
		ctx.PushMessage(model.C_Page, res)
	}
}

func (sw *rosterWrapper) pageSetWrapper(ctx *edge.RequestCtx, in *rony.MessageEnvelope) {
	req := PoolPageSetRequest.Get()
	defer PoolPageSetRequest.Put(req)
	res := model.PoolPage.Get()
	defer model.PoolPage.Put(res)
	err := proto.UnmarshalOptions{Merge: true}.Unmarshal(in.Message, req)
	if err != nil {
		ctx.PushError(rony.ErrCodeInvalid, rony.ErrItemRequest)
		return
	}

	sw.h.PageSet(ctx, req, res)
	if !ctx.Stopped() {
		ctx.PushMessage(model.C_Page, res)
	}
}

func (sw *rosterWrapper) Register(e *edge.Server, ho *edge.HandlerOptions) {
	e.SetHandlers(C_PageGet, true, ho.ApplyTo(sw.pageGetWrapper)...)
	e.SetHandlers(C_PageSet, true, ho.ApplyTo(sw.pageSetWrapper)...)
}

func RegisterRoster(h IRoster, e *edge.Server, ho *edge.HandlerOptions) {
	w := rosterWrapper{
		h: h,
	}
	w.Register(e, ho)
}

func ExecuteRemotePageGet(ctx *edge.RequestCtx, replicaSet uint64, req *PageGetRequest, res *model.Page, kvs ...*rony.KeyValue) error {
	out := rony.PoolMessageEnvelope.Get()
	defer rony.PoolMessageEnvelope.Put(out)
	in := rony.PoolMessageEnvelope.Get()
	defer rony.PoolMessageEnvelope.Put(in)
	out.Fill(ctx.ReqID(), C_PageGet, req, kvs...)
	err := ctx.ExecuteRemote(replicaSet, true, out, in)
	if err != nil {
		return err
	}

	switch in.GetConstructor() {
	case model.C_Page:
		_ = res.Unmarshal(in.GetMessage())
		return nil
	case rony.C_Error:
		x := &rony.Error{}
		_ = x.Unmarshal(in.GetMessage())
		return x
	default:
		return edge.ErrUnexpectedTunnelResponse
	}
}

func ExecuteRemotePageSet(ctx *edge.RequestCtx, replicaSet uint64, req *PageSetRequest, res *model.Page, kvs ...*rony.KeyValue) error {
	out := rony.PoolMessageEnvelope.Get()
	defer rony.PoolMessageEnvelope.Put(out)
	in := rony.PoolMessageEnvelope.Get()
	defer rony.PoolMessageEnvelope.Put(in)
	out.Fill(ctx.ReqID(), C_PageSet, req, kvs...)
	err := ctx.ExecuteRemote(replicaSet, true, out, in)
	if err != nil {
		return err
	}

	switch in.GetConstructor() {
	case model.C_Page:
		_ = res.Unmarshal(in.GetMessage())
		return nil
	case rony.C_Error:
		x := &rony.Error{}
		_ = x.Unmarshal(in.GetMessage())
		return x
	default:
		return edge.ErrUnexpectedTunnelResponse
	}
}

type RosterClient struct {
	c edgec.Client
}

func NewRosterClient(ec edgec.Client) *RosterClient {
	return &RosterClient{
		c: ec,
	}
}

func (c *RosterClient) PageGet(req *PageGetRequest, kvs ...*rony.KeyValue) (*model.Page, error) {
	out := rony.PoolMessageEnvelope.Get()
	defer rony.PoolMessageEnvelope.Put(out)
	in := rony.PoolMessageEnvelope.Get()
	defer rony.PoolMessageEnvelope.Put(in)
	out.Fill(c.c.GetRequestID(), C_PageGet, req, kvs...)
	err := c.c.Send(out, in, true)
	if err != nil {
		return nil, err
	}
	switch in.GetConstructor() {
	case model.C_Page:
		x := &model.Page{}
		_ = proto.Unmarshal(in.Message, x)
		return x, nil
	case rony.C_Error:
		x := &rony.Error{}
		_ = proto.Unmarshal(in.Message, x)
		return nil, fmt.Errorf("%s:%s", x.GetCode(), x.GetItems())
	default:
		return nil, fmt.Errorf("unknown message: %d", in.GetConstructor())
	}
}

func (c *RosterClient) PageSet(req *PageSetRequest, kvs ...*rony.KeyValue) (*model.Page, error) {
	out := rony.PoolMessageEnvelope.Get()
	defer rony.PoolMessageEnvelope.Put(out)
	in := rony.PoolMessageEnvelope.Get()
	defer rony.PoolMessageEnvelope.Put(in)
	out.Fill(c.c.GetRequestID(), C_PageSet, req, kvs...)
	err := c.c.Send(out, in, true)
	if err != nil {
		return nil, err
	}
	switch in.GetConstructor() {
	case model.C_Page:
		x := &model.Page{}
		_ = proto.Unmarshal(in.Message, x)
		return x, nil
	case rony.C_Error:
		x := &rony.Error{}
		_ = proto.Unmarshal(in.Message, x)
		return nil, fmt.Errorf("%s:%s", x.GetCode(), x.GetItems())
	default:
		return nil, fmt.Errorf("unknown message: %d", in.GetConstructor())
	}
}
